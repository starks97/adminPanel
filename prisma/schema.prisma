// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String
  name      String
  lastName  String?
  bio       String?
  image     String?
  birthday  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  //RELATIONS
  sessions Session[]

  role     Role   @relation(fields: [roleName], references: [name])
  roleName String @default("PUBLIC")

  post Post[]
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Role {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  permissions Permissions[]
  //relations

  user User[]
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String    @unique
  content     String
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  //RELATIONS
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId

  comments Comment?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  //RELATIONS
  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique @db.ObjectId
}

enum Permissions {
  CREATE
  READ
  UPDATE
  DELETE
}
