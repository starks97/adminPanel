// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  password String
  name     String
  sessions Session[]

  //Roles
  role Role?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  //RELATIONS
  profile   Profile?
  post      Post[]
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Role {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @unique @default("PUBLIC")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  //relations
  permissions  Permissions[] @relation(fields: [permissionId], references: [id])
  permissionId String[]      @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Permissions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  names     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  roles     Role[]   @relation(fields: [roleIds], references: [id])
  roleIds   String[] @db.ObjectId
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  bio       String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  //RELATIONS
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String    @unique
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  //RELATIONS
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId

  comments Comment?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  //RELATIONS
  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique @db.ObjectId
}

enum Roles {
  PUBLIC
  ADMIN
  OWNER
}
